#!/usr/bin/env php
<?php
namespace Panthera\Binaries;

use Panthera\Components\CommandLine\Application;
use Panthera\Components\Deployment\ArgumentsCollection;
use Panthera\Components\Deployment\Task;
use Panthera\Components\Indexing\IndexService;
use Panthera\Components\Kernel\Framework;

use Panthera\Classes\BaseExceptions\FileNotFoundException;
use Panthera\Classes\BaseExceptions\PantheraFrameworkException;
use Symfony\Component\Yaml\Yaml;


require __DIR__. '/../init.php';

/**
 * Panthera Framework 2 Core deployment
 *
 * @package Panthera\Binaries
 * @author Damian Kęska <damian@pantheraframework.org>
 */
class DeploymentApplication extends Application
{
    /**
     * List of CLI arguments, shortened eg. -h would equal --help
     *
     * @var array
     */
    protected $argumentsShort = [
        'h' => 'help',
        'm' => 'modules',
        'c' => 'check-dependencies',
    ];

    /** @var array $excludedDependencies List of excluded dependencies */
    protected $excludedDependencies = [];

    /**
     * @var null|indexService
     */
    public $indexService = null;

    /**
     * List of available modules
     *
     * @var array
     */
    public $modules = [];

    /**
     * List of all runned tasks
     *
     * @var array
     */
    public $runnedTasks = [];

    /**
     * Mode to only check if all dependencies are at its place
     *
     * @var bool
     */
    public $onlyVerifyDependencies = false;

    /**
     * Arguments handled by tasks
     * Here will appear any argument that was registered by any task and was already called from cli
     *
     * @var string[]
     */
    public $tasksArguments = [];

    /**
     * Constructor
     * Prepare a list of deployment services
     *
     * @author Damian Kęska <damian@pantheraframework.org>
     */
    public function __construct()
    {
        $this->indexService = new IndexService();
        $this->indexService->indexFiles();
        $app = framework::getInstance();

        foreach ($this->indexService->mixedFilesStructure as $folder => $files)
        {
            if (strpos($folder, '/Deployment') === 0)
            {
                // check if directory has it's "index" eg. tests/testsTask.php - this one would execute group of tasks in selected order
                try
                {
                    $groupTask = $app->getPath('.' .$folder . '/' . basename($folder) . 'Task.php');

                    if ($groupTask)
                    {
                        $tmp = explode('/', $folder);
                        unset($tmp[0]); unset($tmp[1]);

                        $this->modules[implode('/', $tmp)] = $groupTask;
                    }

                } catch (FileNotFoundException $e) { };

                foreach ($files as $filePath => $value)
                {
                    $moduleName = substr(str_replace('Task.php', '', $filePath), 12);

                    // don't add "index" task to the list twice
                    if (dirname($moduleName) == basename($moduleName) || pathinfo($filePath, PATHINFO_EXTENSION) !== 'php')
                    {
                        continue;
                    }

                    try {
                        $this->modules[$moduleName] = $app->getPath($filePath);
                    } catch (\Exception $e) {};
                }
            }
        }

        parent::__construct();
    }

    /**
     * List all available deployment modules
     *
     * @cli optional
     * @author Damian Kęska <damian@pantheraframework.org>
     */
    public function modules_cliArgument()
    {
        print(implode("\n", array_keys($this->modules)));
        print("\n");
    }

    /**
     * Only verify dependencies instead of running the deployment
     *
     * @cli optional no-value
     * @author Damian Kęska <damian@pantheraframework.org>
     */
    public function check__dependencies_cliArgument()
    {
        $this->onlyVerifyDependencies = true;
    }

    /**
     * Exclude a dependent task
     *
     * @cli optional
     * @author Damian Kęska <damian@pantheraframework.org>
     */
    public function exclude_cliArgument($value)
    {
        $value = str_replace(' ', '', $value);
        $this->excludedDependencies = explode(',', $value);
    }

    /**
     * Verify task's dependencies recursively
     *
     * @param array $tasks List of tasks
     * @param array $checked List of already checked tasks
     * @param string $parentTask If current iterated task is a child, then there should be a parent
     *
     * @author Damian Kęska <damian@pantheraframework.org>
     * @return null
     */
    public function verifyTasksDependencies($tasks, &$checked, $parentTask = '')
    {
        foreach ($tasks as $task)
        {
            if (in_array($task, $checked) || in_array($task, $this->excludedDependencies))
            {
                continue;
            }

            if (!isset($this->modules[$task]))
            {
                print("Error: Task \"" . $task . "\" does not exists");

                if ($parentTask)
                {
                    print(", required by: \"" . $parentTask . "\"");
                }

                print("\n");
                exit(1);
            }

            $object = $this->loadTaskModule($task);
            $checked[] = $task;

            if ($object->allowUnknownArguments)
            {
                $this->allowUnknownArguments = $object->allowUnknownArguments;
            }

            if ($object->shellArguments)
            {
                foreach ($object->shellArguments as $argument => $description)
                {
                    $this->tasksArguments[$argument] = [
                        'taskName' => $task,
                        'description' => $description
                    ];
                    $argument = str_replace('--', '', $argument). '_cliArgument';

                    if (in_array($argument, $this->notFoundArguments))
                    {
                        unset($this->notFoundArguments[array_search($argument, $this->notFoundArguments)]);
                    }
                }
            }

            if ($object->dependencies)
            {
                $this->verifyTasksDependencies($object->dependencies, $checked, $task);

                if ($this->onlyVerifyDependencies)
                {
                    print(Yaml::dump(array_unique($object->dependencies)));
                }
            }
        }
    }

    /**
     * Additional block in --help that is displaying options for current selected tasks
     *
     * @author Damian Kęska <damian@pantheraframework.org>
     * @return string
     */
    public function __helpText()
    {
        if (!$this->tasksArguments) return '';
        $text = "\n\nArguments defined by current tasks:\n\n";

        foreach ($this->tasksArguments as $argument => $meta)
        {
            $text .= "\t(" .$meta['taskName']. ") --" .$argument. "\t" .$meta['description']. "\n";
        }

        return $text;
    }

    /**
     * Instantiate a task
     *
     * @param string $taskName
     *
     * @throws PantheraFrameworkException
     * @throws FileNotFoundException
     *
     * @author Damian Kęska <damian@pantheraframework.org>
     * @return \Panthera\Components\Deployment\Task|object
     */
    protected function loadTaskModule($taskName)
    {
        if (!is_file($this->modules[$taskName]))
        {
            return false;
        }

        require_once $this->modules[$taskName];
        $appName = $this->app->getName();

        $className = str_replace('/', '\\', $taskName);

        $taskClass = [
            "\\Panthera\\Deployment\\" . $className . "Task",
            "\\Panthera\\Deployment\\" . $className . "\\" . basename($taskName) . "Task",
        ];

        if ($appName && is_string($appName))
        {
            $appName = str_replace(' ', '', $appName);
            $taskClass[] = "\\" .$appName. "\\Deployment\\" . $className . "Task";
            $taskClass[] = "\\" .$appName. "\\Deployment\\" . $className . "\\" . basename($taskName) . "Task";
        }

        foreach ($taskClass as $class)
        {
            if (class_exists($class, false))
            {
                return new $class($this);
            }
        }

        print('Error: Class "' .$taskClass. '" does not exists for module "' .$taskName. "\"\n");
        exit(1);
    }

    /**
     * Parse list of modules given from commandline and execute tasks
     *
     * @param string[] $opts
     *
     * @throws PantheraFrameworkException
     * @throws FileNotFoundException
     *
     * @author Damian Kęska <damian@pantheraframework.org>
     * @return null|void
     */
    public function parseOpts($opts)
    {
        // limit task to only one to be executed, rest of parameters pass to it
        if ($opts)
        {
            $opts = [$opts[1]];
        }

        $checked = [];
        $this->verifyTasksDependencies($opts, $checked);

        if ($this->onlyVerifyDependencies)
        {
            exit(0);
        }
    }

    /**
     * Execute post-parsing opts actions
     *
     * @param \string[] $opts
     * @param bool $dependencies
     *
     * @return null|void
     */
    public function executeOpts($opts, $dependencies = false)
    {
        if (!$opts)
        {
            return false;
        }

        if ($opts && !$dependencies)
        {
            $opts = [ $opts[1] ];
        }

        foreach ($opts as $moduleName)
        {
            if (in_array($moduleName, $this->excludedDependencies))
            {
                continue;
            }

            // don't run same task again
            /*if (isset($this->runnedTasks[$moduleName]))
            {
                return;
            }*/

            $timer = microtime(true);
            print("=======> Running task " . $moduleName . "\n");

            /**
             * @var \Panthera\Components\Deployment\Task $currentTask
             */
            $this->runnedTasks[$moduleName] = $currentTask = $this->loadTaskModule($moduleName);

            if ($currentTask->dependencies)
            {
                $this->executeOpts($currentTask->dependencies, true);
            }

            if (!method_exists($currentTask, 'execute') && !$currentTask->dependencies)
            {
                print("Error: Method execute does not exists in \"" . $moduleName . "\", cannot start task that even dont have any dependencies defined\n");
                exit(1);
            }

            /**
             * Execute a post-dependencies check/execution action
             */
            if (method_exists($currentTask, 'execute'))
            {
                $taskOpts = array_values($this->opts);
                unset($taskOpts[0]);

                $currentTask->execute($this, array_values($taskOpts), new ArgumentsCollection($this->parsedArguments));
            }

            print("\n++ Task finished in: " . (microtime(true) - $timer) . "s\n");
        }
    }
}

Framework::runShellApplication('Deployment');