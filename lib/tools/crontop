#!/usr/bin/env php
<?php
set_time_limit(0); // never stop executing the script

// include lib
define('SITE_DIR', getcwd());

if(!is_file(SITE_DIR. '/content/config.php'))
    die("Please run this tool from the root directory of your website\n");

include(str_ireplace('/tools', '/', dirname(__FILE__)). '/boot.php');
include(PANTHERA_DIR. '/share/texttable.class.php');

// dont mess logs when in cli mode
$panthera -> logging -> tofile = False;

// import cronjob
$panthera -> importModule('crontab');

//error_reporting(5);

class crontop
{
    public function main()
    {
        global $panthera;

        while (True)
        {
            $window = $panthera -> cli;
            $this->window = $window;

            $jobs = crontab::getJobs('');
            $data = array();

            foreach ($jobs as $key => $value)
            {

                // check if job will expire or is infinite
                if ($value->count_left == -1)
                    $left = "infinite";
                elseif ($value->count_left == 0)
                    $left = "expired";
                else
                    $left = $value->count_left;

                // compare dates and create "time left" counter
                $current = new DateTime();
                $next = new DateTime(date('G:i:s d.m.Y', $value->next_interation));
                $interval = $current->diff($next);
                $leftInterval = "(".$interval->format('%R%i min'). ")";

                // show job status
                if (intval($interval->format('%i')) < 1)
                    $leftInterval = "(waiting)";

                $data[] = array('jobid' => $value->jobid, 'Name' => $value->jobname, 'Next interation' => date('G:i:s d.m.Y', $value->next_interation). " ".$leftInterval, 'Created' => $value->created, 'Executed' => $value->count_executed. ' times', 'Left' => $left, 'Minute' => $value->minute, 'Hour' => $value->hour, 'Day' => $value->hour, 'Month' => $value->month, 'Day of week' => $value->weekday, 'Year' => $value->year);
            }

            $jobs = null; // free memory

            // create table
            $renderer = new ArrayToTextTable($data);
            $renderer->showHeaders(true);

            // clear the screen
            $window -> clear();

            // app information
            print($window->picker->getColoredString("crontop ".PANTHERA_VERSION, 'light_cyan')."\n\n");

            // print new data
            print($window->picker->getColoredString("Date:", 'cyan'). " ".date('G:i:s d.m.Y')."\n".$window->picker->getColoredString("Site:", 'cyan')." ".SITE_DIR."\n");
            $renderer->render();

            print("\n".$window->picker->getColoredString("Total jobs:", 'cyan')." ".count($data)."\n");
            print("\n\n".$window->picker->getColoredString("Crontab log (".date('G:i:s d.m.Y', filectime(SITE_DIR. '/content/tmp/crontab.log'))."):", 'light_cyan')."\n+------------------------+\n");
            print(file_get_contents(SITE_DIR. '/content/tmp/crontab.log'));
            print("\n+------------------------+");

            //$input = $window -> raw_input('grabInput');

            print("\n");

            // main loop and input catching
            $this->parseInput($window -> readline(3));
        }
    }

    public function parseInput($input)
    {
        if ($input == "")
            return False;


        switch ($input)
        {
            case 'q':
                pa_exit();
            break;

            case 'e':
                print("Enter job name to execute: ");
                $jobname = $this->window->readline(9999);

                $job = new crontab('jobname', $jobname);

                if ($job -> exists())
                {
                    print("\nExecuting job...\n");
                    echo $job -> execute();
                } else
                    print("\nJob not found.\n");

                print("\nPress any key to continue...");
                $this->window->readline(9999);
            break;
            
            case 'x':
                print("Enter job name to execute in next crontab runtime: ");
                $jobname = $this->window->readline(9999);

                $job = new crontab('jobname', $jobname);

                if ($job -> exists())
                {
                    print("\nSetting up job...\n");
                    $job -> next_interation = 0;
                    $job -> start_time = 0;
                    $job -> save();
                } else
                    print("\nJob not found.\n");

                print("\nPress any key to continue...");
                $this->window->readline(9999);
            break;
            
            case 'p':
                print("Enter job name to print data: ");
                $jobname = $this->window->readline(9999);

                $job = new crontab('jobname', $jobname);

                if ($job -> exists())
                {
                    print_r(unserialize($job->data));
                } else
                    print("\nJob not found.\n");

                print("\nPress any key to continue...");
                $this->window->readline(9999);
            break;

            case 'r':
                print("Enter job name to delete: ");
                $jobname = $this->window->readline(9999);

                $job = new crontab('jobname', $jobname);

                if ($job -> exists())
                {
                    $id = $job -> jobid;
                    unset($job);
                    crontab::removeJob($id);
                    print("\nRemoved.\n");
                } else
                    print("\nJob not found.\n");

                sleep(5);

            break;

            default:
                print("Invalid option specified.\n\nAvaliable options:\n q - exit\n e - execute job by name\n r - remove job by name\nx - set job to be executed on next crontab interation\n\nPress any key to continue...");
                $this->window->readline(99999);
            break;
        }
    }
}

$app = new crontop();
$app -> main();

